{"ast":null,"code":"const Renderer = require('./Renderer.js');\n\nconst _require = require('./defaults.js'),\n      defaults = _require.defaults;\n\nconst _require2 = require('./rules.js'),\n      inline = _require2.inline;\n\nconst _require3 = require('./helpers.js'),\n      findClosingBracket = _require3.findClosingBracket,\n      escape = _require3.escape;\n/**\n * Inline Lexer & Compiler\n */\n\n\nmodule.exports = class InlineLexer {\n  constructor(links, options) {\n    this.options = options || defaults;\n    this.links = links;\n    this.rules = inline.normal;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n\n    if (!this.links) {\n      throw new Error('Tokens array requires a `links` property.');\n    }\n\n    if (this.options.pedantic) {\n      this.rules = inline.pedantic;\n    } else if (this.options.gfm) {\n      if (this.options.breaks) {\n        this.rules = inline.breaks;\n      } else {\n        this.rules = inline.gfm;\n      }\n    }\n  }\n  /**\n   * Expose Inline Rules\n   */\n\n\n  static get rules() {\n    return inline;\n  }\n  /**\n   * Static Lexing/Compiling Method\n   */\n\n\n  static output(src, links, options) {\n    const inline = new InlineLexer(links, options);\n    return inline.output(src);\n  }\n  /**\n   * Lexing/Compiling\n   */\n\n\n  output(src) {\n    let out = '',\n        link,\n        text,\n        href,\n        title,\n        cap,\n        prevCapZero;\n\n    while (src) {\n      // escape\n      if (cap = this.rules.escape.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += escape(cap[1]);\n        continue;\n      } // tag\n\n\n      if (cap = this.rules.tag.exec(src)) {\n        if (!this.inLink && /^<a /i.test(cap[0])) {\n          this.inLink = true;\n        } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.inLink = false;\n        }\n\n        if (!this.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.inRawBlock = true;\n        } else if (this.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.inRawBlock = false;\n        }\n\n        src = src.substring(cap[0].length);\n        out += this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];\n        continue;\n      } // link\n\n\n      if (cap = this.rules.link.exec(src)) {\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n\n        src = src.substring(cap[0].length);\n        this.inLink = true;\n        href = cap[2];\n\n        if (this.options.pedantic) {\n          link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n          if (link) {\n            href = link[1];\n            title = link[3];\n          } else {\n            title = '';\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n\n        href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n        out += this.outputLink(cap, {\n          href: InlineLexer.escapes(href),\n          title: InlineLexer.escapes(title)\n        });\n        this.inLink = false;\n        continue;\n      } // reflink, nolink\n\n\n      if ((cap = this.rules.reflink.exec(src)) || (cap = this.rules.nolink.exec(src))) {\n        src = src.substring(cap[0].length);\n        link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n        link = this.links[link.toLowerCase()];\n\n        if (!link || !link.href) {\n          out += cap[0].charAt(0);\n          src = cap[0].substring(1) + src;\n          continue;\n        }\n\n        this.inLink = true;\n        out += this.outputLink(cap, link);\n        this.inLink = false;\n        continue;\n      } // strong\n\n\n      if (cap = this.rules.strong.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n        continue;\n      } // em\n\n\n      if (cap = this.rules.em.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n        continue;\n      } // code\n\n\n      if (cap = this.rules.code.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.codespan(escape(cap[2].trim(), true));\n        continue;\n      } // br\n\n\n      if (cap = this.rules.br.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.br();\n        continue;\n      } // del (gfm)\n\n\n      if (cap = this.rules.del.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.del(this.output(cap[1]));\n        continue;\n      } // autolink\n\n\n      if (cap = this.rules.autolink.exec(src)) {\n        src = src.substring(cap[0].length);\n\n        if (cap[2] === '@') {\n          text = escape(this.mangle(cap[1]));\n          href = 'mailto:' + text;\n        } else {\n          text = escape(cap[1]);\n          href = text;\n        }\n\n        out += this.renderer.link(href, null, text);\n        continue;\n      } // url (gfm)\n\n\n      if (!this.inLink && (cap = this.rules.url.exec(src))) {\n        if (cap[2] === '@') {\n          text = escape(cap[0]);\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          do {\n            prevCapZero = cap[0];\n            cap[0] = this.rules._backpedal.exec(cap[0])[0];\n          } while (prevCapZero !== cap[0]);\n\n          text = escape(cap[0]);\n\n          if (cap[1] === 'www.') {\n            href = 'http://' + text;\n          } else {\n            href = text;\n          }\n        }\n\n        src = src.substring(cap[0].length);\n        out += this.renderer.link(href, null, text);\n        continue;\n      } // text\n\n\n      if (cap = this.rules.text.exec(src)) {\n        src = src.substring(cap[0].length);\n\n        if (this.inRawBlock) {\n          out += this.renderer.text(this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]);\n        } else {\n          out += this.renderer.text(escape(this.smartypants(cap[0])));\n        }\n\n        continue;\n      }\n\n      if (src) {\n        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n      }\n    }\n\n    return out;\n  }\n\n  static escapes(text) {\n    return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n  }\n  /**\n   * Compile Link\n   */\n\n\n  outputLink(cap, link) {\n    const href = link.href,\n          title = link.title ? escape(link.title) : null;\n    return cap[0].charAt(0) !== '!' ? this.renderer.link(href, title, this.output(cap[1])) : this.renderer.image(href, title, escape(cap[1]));\n  }\n  /**\n   * Smartypants Transformations\n   */\n\n\n  smartypants(text) {\n    if (!this.options.smartypants) return text;\n    return text // em-dashes\n    .replace(/---/g, '\\u2014') // en-dashes\n    .replace(/--/g, '\\u2013') // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018') // closing singles & apostrophes\n    .replace(/'/g, '\\u2019') // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c') // closing doubles\n    .replace(/\"/g, '\\u201d') // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n  }\n  /**\n   * Mangle Links\n   */\n\n\n  mangle(text) {\n    if (!this.options.mangle) return text;\n    const l = text.length;\n    let out = '',\n        i = 0,\n        ch;\n\n    for (; i < l; i++) {\n      ch = text.charCodeAt(i);\n\n      if (Math.random() > 0.5) {\n        ch = 'x' + ch.toString(16);\n      }\n\n      out += '&#' + ch + ';';\n    }\n\n    return out;\n  }\n\n};","map":{"version":3,"sources":["/Users/aziz/Documents/Aziz-Final-project-react-new-markdown-previewer-hooks/node_modules/marked/src/InlineLexer.js"],"names":["Renderer","require","defaults","inline","findClosingBracket","escape","module","exports","InlineLexer","constructor","links","options","rules","normal","renderer","Error","pedantic","gfm","breaks","output","src","out","link","text","href","title","cap","prevCapZero","exec","substring","length","tag","inLink","test","inRawBlock","sanitize","sanitizer","lastParenIndex","start","indexOf","linkLen","trim","slice","replace","outputLink","escapes","reflink","nolink","toLowerCase","charAt","strong","em","code","codespan","br","del","autolink","mangle","url","_backpedal","smartypants","charCodeAt","_escapes","image","l","i","ch","Math","random","toString"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAxB;;iBACqBA,OAAO,CAAC,eAAD,C;MAApBC,Q,YAAAA,Q;;kBACWD,OAAO,CAAC,YAAD,C;MAAlBE,M,aAAAA,M;;kBAIJF,OAAO,CAAC,cAAD,C;MAFTG,kB,aAAAA,kB;MACAC,M,aAAAA,M;AAGF;;;;;AAGAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,WAAN,CAAkB;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,SAAKA,OAAL,GAAeA,OAAO,IAAIT,QAA1B;AACA,SAAKQ,KAAL,GAAaA,KAAb;AACA,SAAKE,KAAL,GAAaT,MAAM,CAACU,MAApB;AACA,SAAKF,OAAL,CAAaG,QAAb,GAAwB,KAAKH,OAAL,CAAaG,QAAb,IAAyB,IAAId,QAAJ,EAAjD;AACA,SAAKc,QAAL,GAAgB,KAAKH,OAAL,CAAaG,QAA7B;AACA,SAAKA,QAAL,CAAcH,OAAd,GAAwB,KAAKA,OAA7B;;AAEA,QAAI,CAAC,KAAKD,KAAV,EAAiB;AACf,YAAM,IAAIK,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,QAAI,KAAKJ,OAAL,CAAaK,QAAjB,EAA2B;AACzB,WAAKJ,KAAL,GAAaT,MAAM,CAACa,QAApB;AACD,KAFD,MAEO,IAAI,KAAKL,OAAL,CAAaM,GAAjB,EAAsB;AAC3B,UAAI,KAAKN,OAAL,CAAaO,MAAjB,EAAyB;AACvB,aAAKN,KAAL,GAAaT,MAAM,CAACe,MAApB;AACD,OAFD,MAEO;AACL,aAAKN,KAAL,GAAaT,MAAM,CAACc,GAApB;AACD;AACF;AACF;AAED;;;;;AAGA,aAAWL,KAAX,GAAmB;AACjB,WAAOT,MAAP;AACD;AAED;;;;;AAGA,SAAOgB,MAAP,CAAcC,GAAd,EAAmBV,KAAnB,EAA0BC,OAA1B,EAAmC;AACjC,UAAMR,MAAM,GAAG,IAAIK,WAAJ,CAAgBE,KAAhB,EAAuBC,OAAvB,CAAf;AACA,WAAOR,MAAM,CAACgB,MAAP,CAAcC,GAAd,CAAP;AACD;AAED;;;;;AAGAD,EAAAA,MAAM,CAACC,GAAD,EAAM;AACV,QAAIC,GAAG,GAAG,EAAV;AAAA,QACEC,IADF;AAAA,QAEEC,IAFF;AAAA,QAGEC,IAHF;AAAA,QAIEC,KAJF;AAAA,QAKEC,GALF;AAAA,QAMEC,WANF;;AAQA,WAAOP,GAAP,EAAY;AACV;AACA,UAAIM,GAAG,GAAG,KAAKd,KAAL,CAAWP,MAAX,CAAkBuB,IAAlB,CAAuBR,GAAvB,CAAV,EAAuC;AACrCA,QAAAA,GAAG,GAAGA,GAAG,CAACS,SAAJ,CAAcH,GAAG,CAAC,CAAD,CAAH,CAAOI,MAArB,CAAN;AACAT,QAAAA,GAAG,IAAIhB,MAAM,CAACqB,GAAG,CAAC,CAAD,CAAJ,CAAb;AACA;AACD,OANS,CAQV;;;AACA,UAAIA,GAAG,GAAG,KAAKd,KAAL,CAAWmB,GAAX,CAAeH,IAAf,CAAoBR,GAApB,CAAV,EAAoC;AAClC,YAAI,CAAC,KAAKY,MAAN,IAAgB,QAAQC,IAAR,CAAaP,GAAG,CAAC,CAAD,CAAhB,CAApB,EAA0C;AACxC,eAAKM,MAAL,GAAc,IAAd;AACD,SAFD,MAEO,IAAI,KAAKA,MAAL,IAAe,UAAUC,IAAV,CAAeP,GAAG,CAAC,CAAD,CAAlB,CAAnB,EAA2C;AAChD,eAAKM,MAAL,GAAc,KAAd;AACD;;AACD,YAAI,CAAC,KAAKE,UAAN,IAAoB,iCAAiCD,IAAjC,CAAsCP,GAAG,CAAC,CAAD,CAAzC,CAAxB,EAAuE;AACrE,eAAKQ,UAAL,GAAkB,IAAlB;AACD,SAFD,MAEO,IAAI,KAAKA,UAAL,IAAmB,mCAAmCD,IAAnC,CAAwCP,GAAG,CAAC,CAAD,CAA3C,CAAvB,EAAwE;AAC7E,eAAKQ,UAAL,GAAkB,KAAlB;AACD;;AAEDd,QAAAA,GAAG,GAAGA,GAAG,CAACS,SAAJ,CAAcH,GAAG,CAAC,CAAD,CAAH,CAAOI,MAArB,CAAN;AACAT,QAAAA,GAAG,IAAI,KAAKV,OAAL,CAAawB,QAAb,GACH,KAAKxB,OAAL,CAAayB,SAAb,GACE,KAAKzB,OAAL,CAAayB,SAAb,CAAuBV,GAAG,CAAC,CAAD,CAA1B,CADF,GAEErB,MAAM,CAACqB,GAAG,CAAC,CAAD,CAAJ,CAHL,GAIHA,GAAG,CAAC,CAAD,CAJP;AAKA;AACD,OA5BS,CA8BV;;;AACA,UAAIA,GAAG,GAAG,KAAKd,KAAL,CAAWU,IAAX,CAAgBM,IAAhB,CAAqBR,GAArB,CAAV,EAAqC;AACnC,cAAMiB,cAAc,GAAGjC,kBAAkB,CAACsB,GAAG,CAAC,CAAD,CAAJ,EAAS,IAAT,CAAzC;;AACA,YAAIW,cAAc,GAAG,CAAC,CAAtB,EAAyB;AACvB,gBAAMC,KAAK,GAAGZ,GAAG,CAAC,CAAD,CAAH,CAAOa,OAAP,CAAe,GAAf,MAAwB,CAAxB,GAA4B,CAA5B,GAAgC,CAA9C;AACA,gBAAMC,OAAO,GAAGF,KAAK,GAAGZ,GAAG,CAAC,CAAD,CAAH,CAAOI,MAAf,GAAwBO,cAAxC;AACAX,UAAAA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOG,SAAP,CAAiB,CAAjB,EAAoBQ,cAApB,CAAT;AACAX,UAAAA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOG,SAAP,CAAiB,CAAjB,EAAoBW,OAApB,EAA6BC,IAA7B,EAAT;AACAf,UAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,EAAT;AACD;;AACDN,QAAAA,GAAG,GAAGA,GAAG,CAACS,SAAJ,CAAcH,GAAG,CAAC,CAAD,CAAH,CAAOI,MAArB,CAAN;AACA,aAAKE,MAAL,GAAc,IAAd;AACAR,QAAAA,IAAI,GAAGE,GAAG,CAAC,CAAD,CAAV;;AACA,YAAI,KAAKf,OAAL,CAAaK,QAAjB,EAA2B;AACzBM,UAAAA,IAAI,GAAG,gCAAgCM,IAAhC,CAAqCJ,IAArC,CAAP;;AAEA,cAAIF,IAAJ,EAAU;AACRE,YAAAA,IAAI,GAAGF,IAAI,CAAC,CAAD,CAAX;AACAG,YAAAA,KAAK,GAAGH,IAAI,CAAC,CAAD,CAAZ;AACD,WAHD,MAGO;AACLG,YAAAA,KAAK,GAAG,EAAR;AACD;AACF,SATD,MASO;AACLA,UAAAA,KAAK,GAAGC,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOgB,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAT,GAA+B,EAAvC;AACD;;AACDlB,QAAAA,IAAI,GAAGA,IAAI,CAACiB,IAAL,GAAYE,OAAZ,CAAoB,eAApB,EAAqC,IAArC,CAAP;AACAtB,QAAAA,GAAG,IAAI,KAAKuB,UAAL,CAAgBlB,GAAhB,EAAqB;AAC1BF,UAAAA,IAAI,EAAEhB,WAAW,CAACqC,OAAZ,CAAoBrB,IAApB,CADoB;AAE1BC,UAAAA,KAAK,EAAEjB,WAAW,CAACqC,OAAZ,CAAoBpB,KAApB;AAFmB,SAArB,CAAP;AAIA,aAAKO,MAAL,GAAc,KAAd;AACA;AACD,OA9DS,CAgEV;;;AACA,UAAI,CAACN,GAAG,GAAG,KAAKd,KAAL,CAAWkC,OAAX,CAAmBlB,IAAnB,CAAwBR,GAAxB,CAAP,MACIM,GAAG,GAAG,KAAKd,KAAL,CAAWmC,MAAX,CAAkBnB,IAAlB,CAAuBR,GAAvB,CADV,CAAJ,EAC4C;AAC1CA,QAAAA,GAAG,GAAGA,GAAG,CAACS,SAAJ,CAAcH,GAAG,CAAC,CAAD,CAAH,CAAOI,MAArB,CAAN;AACAR,QAAAA,IAAI,GAAG,CAACI,GAAG,CAAC,CAAD,CAAH,IAAUA,GAAG,CAAC,CAAD,CAAd,EAAmBiB,OAAnB,CAA2B,MAA3B,EAAmC,GAAnC,CAAP;AACArB,QAAAA,IAAI,GAAG,KAAKZ,KAAL,CAAWY,IAAI,CAAC0B,WAAL,EAAX,CAAP;;AACA,YAAI,CAAC1B,IAAD,IAAS,CAACA,IAAI,CAACE,IAAnB,EAAyB;AACvBH,UAAAA,GAAG,IAAIK,GAAG,CAAC,CAAD,CAAH,CAAOuB,MAAP,CAAc,CAAd,CAAP;AACA7B,UAAAA,GAAG,GAAGM,GAAG,CAAC,CAAD,CAAH,CAAOG,SAAP,CAAiB,CAAjB,IAAsBT,GAA5B;AACA;AACD;;AACD,aAAKY,MAAL,GAAc,IAAd;AACAX,QAAAA,GAAG,IAAI,KAAKuB,UAAL,CAAgBlB,GAAhB,EAAqBJ,IAArB,CAAP;AACA,aAAKU,MAAL,GAAc,KAAd;AACA;AACD,OA/ES,CAiFV;;;AACA,UAAIN,GAAG,GAAG,KAAKd,KAAL,CAAWsC,MAAX,CAAkBtB,IAAlB,CAAuBR,GAAvB,CAAV,EAAuC;AACrCA,QAAAA,GAAG,GAAGA,GAAG,CAACS,SAAJ,CAAcH,GAAG,CAAC,CAAD,CAAH,CAAOI,MAArB,CAAN;AACAT,QAAAA,GAAG,IAAI,KAAKP,QAAL,CAAcoC,MAAd,CAAqB,KAAK/B,MAAL,CAAYO,GAAG,CAAC,CAAD,CAAH,IAAUA,GAAG,CAAC,CAAD,CAAb,IAAoBA,GAAG,CAAC,CAAD,CAAvB,IAA8BA,GAAG,CAAC,CAAD,CAA7C,CAArB,CAAP;AACA;AACD,OAtFS,CAwFV;;;AACA,UAAIA,GAAG,GAAG,KAAKd,KAAL,CAAWuC,EAAX,CAAcvB,IAAd,CAAmBR,GAAnB,CAAV,EAAmC;AACjCA,QAAAA,GAAG,GAAGA,GAAG,CAACS,SAAJ,CAAcH,GAAG,CAAC,CAAD,CAAH,CAAOI,MAArB,CAAN;AACAT,QAAAA,GAAG,IAAI,KAAKP,QAAL,CAAcqC,EAAd,CAAiB,KAAKhC,MAAL,CAAYO,GAAG,CAAC,CAAD,CAAH,IAAUA,GAAG,CAAC,CAAD,CAAb,IAAoBA,GAAG,CAAC,CAAD,CAAvB,IAA8BA,GAAG,CAAC,CAAD,CAAjC,IAAwCA,GAAG,CAAC,CAAD,CAA3C,IAAkDA,GAAG,CAAC,CAAD,CAAjE,CAAjB,CAAP;AACA;AACD,OA7FS,CA+FV;;;AACA,UAAIA,GAAG,GAAG,KAAKd,KAAL,CAAWwC,IAAX,CAAgBxB,IAAhB,CAAqBR,GAArB,CAAV,EAAqC;AACnCA,QAAAA,GAAG,GAAGA,GAAG,CAACS,SAAJ,CAAcH,GAAG,CAAC,CAAD,CAAH,CAAOI,MAArB,CAAN;AACAT,QAAAA,GAAG,IAAI,KAAKP,QAAL,CAAcuC,QAAd,CAAuBhD,MAAM,CAACqB,GAAG,CAAC,CAAD,CAAH,CAAOe,IAAP,EAAD,EAAgB,IAAhB,CAA7B,CAAP;AACA;AACD,OApGS,CAsGV;;;AACA,UAAIf,GAAG,GAAG,KAAKd,KAAL,CAAW0C,EAAX,CAAc1B,IAAd,CAAmBR,GAAnB,CAAV,EAAmC;AACjCA,QAAAA,GAAG,GAAGA,GAAG,CAACS,SAAJ,CAAcH,GAAG,CAAC,CAAD,CAAH,CAAOI,MAArB,CAAN;AACAT,QAAAA,GAAG,IAAI,KAAKP,QAAL,CAAcwC,EAAd,EAAP;AACA;AACD,OA3GS,CA6GV;;;AACA,UAAI5B,GAAG,GAAG,KAAKd,KAAL,CAAW2C,GAAX,CAAe3B,IAAf,CAAoBR,GAApB,CAAV,EAAoC;AAClCA,QAAAA,GAAG,GAAGA,GAAG,CAACS,SAAJ,CAAcH,GAAG,CAAC,CAAD,CAAH,CAAOI,MAArB,CAAN;AACAT,QAAAA,GAAG,IAAI,KAAKP,QAAL,CAAcyC,GAAd,CAAkB,KAAKpC,MAAL,CAAYO,GAAG,CAAC,CAAD,CAAf,CAAlB,CAAP;AACA;AACD,OAlHS,CAoHV;;;AACA,UAAIA,GAAG,GAAG,KAAKd,KAAL,CAAW4C,QAAX,CAAoB5B,IAApB,CAAyBR,GAAzB,CAAV,EAAyC;AACvCA,QAAAA,GAAG,GAAGA,GAAG,CAACS,SAAJ,CAAcH,GAAG,CAAC,CAAD,CAAH,CAAOI,MAArB,CAAN;;AACA,YAAIJ,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClBH,UAAAA,IAAI,GAAGlB,MAAM,CAAC,KAAKoD,MAAL,CAAY/B,GAAG,CAAC,CAAD,CAAf,CAAD,CAAb;AACAF,UAAAA,IAAI,GAAG,YAAYD,IAAnB;AACD,SAHD,MAGO;AACLA,UAAAA,IAAI,GAAGlB,MAAM,CAACqB,GAAG,CAAC,CAAD,CAAJ,CAAb;AACAF,UAAAA,IAAI,GAAGD,IAAP;AACD;;AACDF,QAAAA,GAAG,IAAI,KAAKP,QAAL,CAAcQ,IAAd,CAAmBE,IAAnB,EAAyB,IAAzB,EAA+BD,IAA/B,CAAP;AACA;AACD,OAhIS,CAkIV;;;AACA,UAAI,CAAC,KAAKS,MAAN,KAAiBN,GAAG,GAAG,KAAKd,KAAL,CAAW8C,GAAX,CAAe9B,IAAf,CAAoBR,GAApB,CAAvB,CAAJ,EAAsD;AACpD,YAAIM,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClBH,UAAAA,IAAI,GAAGlB,MAAM,CAACqB,GAAG,CAAC,CAAD,CAAJ,CAAb;AACAF,UAAAA,IAAI,GAAG,YAAYD,IAAnB;AACD,SAHD,MAGO;AACL;AACA,aAAG;AACDI,YAAAA,WAAW,GAAGD,GAAG,CAAC,CAAD,CAAjB;AACAA,YAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,KAAKd,KAAL,CAAW+C,UAAX,CAAsB/B,IAAtB,CAA2BF,GAAG,CAAC,CAAD,CAA9B,EAAmC,CAAnC,CAAT;AACD,WAHD,QAGSC,WAAW,KAAKD,GAAG,CAAC,CAAD,CAH5B;;AAIAH,UAAAA,IAAI,GAAGlB,MAAM,CAACqB,GAAG,CAAC,CAAD,CAAJ,CAAb;;AACA,cAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,MAAf,EAAuB;AACrBF,YAAAA,IAAI,GAAG,YAAYD,IAAnB;AACD,WAFD,MAEO;AACLC,YAAAA,IAAI,GAAGD,IAAP;AACD;AACF;;AACDH,QAAAA,GAAG,GAAGA,GAAG,CAACS,SAAJ,CAAcH,GAAG,CAAC,CAAD,CAAH,CAAOI,MAArB,CAAN;AACAT,QAAAA,GAAG,IAAI,KAAKP,QAAL,CAAcQ,IAAd,CAAmBE,IAAnB,EAAyB,IAAzB,EAA+BD,IAA/B,CAAP;AACA;AACD,OAvJS,CAyJV;;;AACA,UAAIG,GAAG,GAAG,KAAKd,KAAL,CAAWW,IAAX,CAAgBK,IAAhB,CAAqBR,GAArB,CAAV,EAAqC;AACnCA,QAAAA,GAAG,GAAGA,GAAG,CAACS,SAAJ,CAAcH,GAAG,CAAC,CAAD,CAAH,CAAOI,MAArB,CAAN;;AACA,YAAI,KAAKI,UAAT,EAAqB;AACnBb,UAAAA,GAAG,IAAI,KAAKP,QAAL,CAAcS,IAAd,CAAmB,KAAKZ,OAAL,CAAawB,QAAb,GAAyB,KAAKxB,OAAL,CAAayB,SAAb,GAAyB,KAAKzB,OAAL,CAAayB,SAAb,CAAuBV,GAAG,CAAC,CAAD,CAA1B,CAAzB,GAA0DrB,MAAM,CAACqB,GAAG,CAAC,CAAD,CAAJ,CAAzF,GAAqGA,GAAG,CAAC,CAAD,CAA3H,CAAP;AACD,SAFD,MAEO;AACLL,UAAAA,GAAG,IAAI,KAAKP,QAAL,CAAcS,IAAd,CAAmBlB,MAAM,CAAC,KAAKuD,WAAL,CAAiBlC,GAAG,CAAC,CAAD,CAApB,CAAD,CAAzB,CAAP;AACD;;AACD;AACD;;AAED,UAAIN,GAAJ,EAAS;AACP,cAAM,IAAIL,KAAJ,CAAU,4BAA4BK,GAAG,CAACyC,UAAJ,CAAe,CAAf,CAAtC,CAAN;AACD;AACF;;AAED,WAAOxC,GAAP;AACD;;AAED,SAAOwB,OAAP,CAAetB,IAAf,EAAqB;AACnB,WAAOA,IAAI,GAAGA,IAAI,CAACoB,OAAL,CAAanC,WAAW,CAACI,KAAZ,CAAkBkD,QAA/B,EAAyC,IAAzC,CAAH,GAAoDvC,IAA/D;AACD;AAED;;;;;AAGAqB,EAAAA,UAAU,CAAClB,GAAD,EAAMJ,IAAN,EAAY;AACpB,UAAME,IAAI,GAAGF,IAAI,CAACE,IAAlB;AAAA,UACEC,KAAK,GAAGH,IAAI,CAACG,KAAL,GAAapB,MAAM,CAACiB,IAAI,CAACG,KAAN,CAAnB,GAAkC,IAD5C;AAGA,WAAOC,GAAG,CAAC,CAAD,CAAH,CAAOuB,MAAP,CAAc,CAAd,MAAqB,GAArB,GACH,KAAKnC,QAAL,CAAcQ,IAAd,CAAmBE,IAAnB,EAAyBC,KAAzB,EAAgC,KAAKN,MAAL,CAAYO,GAAG,CAAC,CAAD,CAAf,CAAhC,CADG,GAEH,KAAKZ,QAAL,CAAciD,KAAd,CAAoBvC,IAApB,EAA0BC,KAA1B,EAAiCpB,MAAM,CAACqB,GAAG,CAAC,CAAD,CAAJ,CAAvC,CAFJ;AAGD;AAED;;;;;AAGAkC,EAAAA,WAAW,CAACrC,IAAD,EAAO;AAChB,QAAI,CAAC,KAAKZ,OAAL,CAAaiD,WAAlB,EAA+B,OAAOrC,IAAP;AAC/B,WAAOA,IAAI,CACT;AADS,KAERoB,OAFI,CAEI,MAFJ,EAEY,QAFZ,EAGL;AAHK,KAIJA,OAJI,CAII,KAJJ,EAIW,QAJX,EAKL;AALK,KAMJA,OANI,CAMI,yBANJ,EAM+B,UAN/B,EAOL;AAPK,KAQJA,OARI,CAQI,IARJ,EAQU,QARV,EASL;AATK,KAUJA,OAVI,CAUI,8BAVJ,EAUoC,UAVpC,EAWL;AAXK,KAYJA,OAZI,CAYI,IAZJ,EAYU,QAZV,EAaL;AAbK,KAcJA,OAdI,CAcI,QAdJ,EAcc,QAdd,CAAP;AAeD;AAED;;;;;AAGAc,EAAAA,MAAM,CAAClC,IAAD,EAAO;AACX,QAAI,CAAC,KAAKZ,OAAL,CAAa8C,MAAlB,EAA0B,OAAOlC,IAAP;AAC1B,UAAMyC,CAAC,GAAGzC,IAAI,CAACO,MAAf;AACA,QAAIT,GAAG,GAAG,EAAV;AAAA,QACE4C,CAAC,GAAG,CADN;AAAA,QAEEC,EAFF;;AAIA,WAAOD,CAAC,GAAGD,CAAX,EAAcC,CAAC,EAAf,EAAmB;AACjBC,MAAAA,EAAE,GAAG3C,IAAI,CAACsC,UAAL,CAAgBI,CAAhB,CAAL;;AACA,UAAIE,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACvBF,QAAAA,EAAE,GAAG,MAAMA,EAAE,CAACG,QAAH,CAAY,EAAZ,CAAX;AACD;;AACDhD,MAAAA,GAAG,IAAI,OAAO6C,EAAP,GAAY,GAAnB;AACD;;AAED,WAAO7C,GAAP;AACD;;AAxRgC,CAAnC","sourcesContent":["const Renderer = require('./Renderer.js');\nconst { defaults } = require('./defaults.js');\nconst { inline } = require('./rules.js');\nconst {\n  findClosingBracket,\n  escape\n} = require('./helpers.js');\n\n/**\n * Inline Lexer & Compiler\n */\nmodule.exports = class InlineLexer {\n  constructor(links, options) {\n    this.options = options || defaults;\n    this.links = links;\n    this.rules = inline.normal;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n\n    if (!this.links) {\n      throw new Error('Tokens array requires a `links` property.');\n    }\n\n    if (this.options.pedantic) {\n      this.rules = inline.pedantic;\n    } else if (this.options.gfm) {\n      if (this.options.breaks) {\n        this.rules = inline.breaks;\n      } else {\n        this.rules = inline.gfm;\n      }\n    }\n  }\n\n  /**\n   * Expose Inline Rules\n   */\n  static get rules() {\n    return inline;\n  }\n\n  /**\n   * Static Lexing/Compiling Method\n   */\n  static output(src, links, options) {\n    const inline = new InlineLexer(links, options);\n    return inline.output(src);\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  output(src) {\n    let out = '',\n      link,\n      text,\n      href,\n      title,\n      cap,\n      prevCapZero;\n\n    while (src) {\n      // escape\n      if (cap = this.rules.escape.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += escape(cap[1]);\n        continue;\n      }\n\n      // tag\n      if (cap = this.rules.tag.exec(src)) {\n        if (!this.inLink && /^<a /i.test(cap[0])) {\n          this.inLink = true;\n        } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.inLink = false;\n        }\n        if (!this.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.inRawBlock = true;\n        } else if (this.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.inRawBlock = false;\n        }\n\n        src = src.substring(cap[0].length);\n        out += this.options.sanitize\n          ? this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0])\n          : cap[0];\n        continue;\n      }\n\n      // link\n      if (cap = this.rules.link.exec(src)) {\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n        src = src.substring(cap[0].length);\n        this.inLink = true;\n        href = cap[2];\n        if (this.options.pedantic) {\n          link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n          if (link) {\n            href = link[1];\n            title = link[3];\n          } else {\n            title = '';\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n        href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n        out += this.outputLink(cap, {\n          href: InlineLexer.escapes(href),\n          title: InlineLexer.escapes(title)\n        });\n        this.inLink = false;\n        continue;\n      }\n\n      // reflink, nolink\n      if ((cap = this.rules.reflink.exec(src))\n          || (cap = this.rules.nolink.exec(src))) {\n        src = src.substring(cap[0].length);\n        link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n        link = this.links[link.toLowerCase()];\n        if (!link || !link.href) {\n          out += cap[0].charAt(0);\n          src = cap[0].substring(1) + src;\n          continue;\n        }\n        this.inLink = true;\n        out += this.outputLink(cap, link);\n        this.inLink = false;\n        continue;\n      }\n\n      // strong\n      if (cap = this.rules.strong.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n        continue;\n      }\n\n      // em\n      if (cap = this.rules.em.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n        continue;\n      }\n\n      // code\n      if (cap = this.rules.code.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.codespan(escape(cap[2].trim(), true));\n        continue;\n      }\n\n      // br\n      if (cap = this.rules.br.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.br();\n        continue;\n      }\n\n      // del (gfm)\n      if (cap = this.rules.del.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.del(this.output(cap[1]));\n        continue;\n      }\n\n      // autolink\n      if (cap = this.rules.autolink.exec(src)) {\n        src = src.substring(cap[0].length);\n        if (cap[2] === '@') {\n          text = escape(this.mangle(cap[1]));\n          href = 'mailto:' + text;\n        } else {\n          text = escape(cap[1]);\n          href = text;\n        }\n        out += this.renderer.link(href, null, text);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.inLink && (cap = this.rules.url.exec(src))) {\n        if (cap[2] === '@') {\n          text = escape(cap[0]);\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          do {\n            prevCapZero = cap[0];\n            cap[0] = this.rules._backpedal.exec(cap[0])[0];\n          } while (prevCapZero !== cap[0]);\n          text = escape(cap[0]);\n          if (cap[1] === 'www.') {\n            href = 'http://' + text;\n          } else {\n            href = text;\n          }\n        }\n        src = src.substring(cap[0].length);\n        out += this.renderer.link(href, null, text);\n        continue;\n      }\n\n      // text\n      if (cap = this.rules.text.exec(src)) {\n        src = src.substring(cap[0].length);\n        if (this.inRawBlock) {\n          out += this.renderer.text(this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0]);\n        } else {\n          out += this.renderer.text(escape(this.smartypants(cap[0])));\n        }\n        continue;\n      }\n\n      if (src) {\n        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n      }\n    }\n\n    return out;\n  }\n\n  static escapes(text) {\n    return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n  }\n\n  /**\n   * Compile Link\n   */\n  outputLink(cap, link) {\n    const href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n    return cap[0].charAt(0) !== '!'\n      ? this.renderer.link(href, title, this.output(cap[1]))\n      : this.renderer.image(href, title, escape(cap[1]));\n  }\n\n  /**\n   * Smartypants Transformations\n   */\n  smartypants(text) {\n    if (!this.options.smartypants) return text;\n    return text\n      // em-dashes\n      .replace(/---/g, '\\u2014')\n      // en-dashes\n      .replace(/--/g, '\\u2013')\n      // opening singles\n      .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n      // closing singles & apostrophes\n      .replace(/'/g, '\\u2019')\n      // opening doubles\n      .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n      // closing doubles\n      .replace(/\"/g, '\\u201d')\n      // ellipses\n      .replace(/\\.{3}/g, '\\u2026');\n  }\n\n  /**\n   * Mangle Links\n   */\n  mangle(text) {\n    if (!this.options.mangle) return text;\n    const l = text.length;\n    let out = '',\n      i = 0,\n      ch;\n\n    for (; i < l; i++) {\n      ch = text.charCodeAt(i);\n      if (Math.random() > 0.5) {\n        ch = 'x' + ch.toString(16);\n      }\n      out += '&#' + ch + ';';\n    }\n\n    return out;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}