{"ast":null,"code":"/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nconst getEscapeReplacement = ch => escapeReplacements[ch];\n\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();\n    } catch (e) {\n      return null;\n    }\n\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = {\n  exec: function noopTest() {}\n};\n\nfunction merge(obj) {\n  let i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n    let escaped = false,\n        curr = offset;\n\n    while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n\n    if (escaped) {\n      // odd number of slashes means | is escaped\n      // so we leave it alone\n      return '|';\n    } else {\n      // add space before unescaped |\n      return ' |';\n    }\n  }),\n        cells = row.split(/ \\|/);\n  let i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n\n  return cells;\n} // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\n\n\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n\n  if (l === 0) {\n    return '';\n  } // Length of suffix matching the invert condition.\n\n\n  let suffLen = 0; // Step left until we fail to match the invert condition.\n\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  const l = str.length;\n  let level = 0,\n      i = 0;\n\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\nmodule.exports = {\n  escape,\n  unescape,\n  edit,\n  cleanUrl,\n  resolveUrl,\n  noopTest,\n  merge,\n  splitCells,\n  rtrim,\n  findClosingBracket,\n  checkSanitizeDeprecation\n};","map":{"version":3,"sources":["/Users/aziz/Documents/Aziz-Final-project-react-new-markdown-previewer-hooks/node_modules/marked/src/helpers.js"],"names":["escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","source","obj","name","val","getRegex","RegExp","nonWordAndColonTest","originIndependentUrl","cleanUrl","sanitize","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","merge","i","target","key","arguments","length","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","splice","push","trim","c","invert","l","suffLen","currChar","substr","findClosingBracket","b","level","checkSanitizeDeprecation","silent","console","warn","module","exports"],"mappings":"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","sourcesContent":["/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\nmodule.exports = {\n  escape,\n  unescape,\n  edit,\n  cleanUrl,\n  resolveUrl,\n  noopTest,\n  merge,\n  splitCells,\n  rtrim,\n  findClosingBracket,\n  checkSanitizeDeprecation\n};\n"]},"metadata":{},"sourceType":"script"}