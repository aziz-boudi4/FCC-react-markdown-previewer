{"ast":null,"code":"const _require = require('./defaults.js'),\n      defaults = _require.defaults;\n\nconst _require2 = require('./helpers.js'),\n      cleanUrl = _require2.cleanUrl,\n      escape = _require2.escape;\n/**\n * Renderer\n */\n\n\nmodule.exports = class Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    if (!lang) {\n      return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>';\n    }\n\n    return '<pre><code class=\"' + this.options.langPrefix + escape(lang, true) + '\">' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n  }\n\n  blockquote(quote) {\n    return '<blockquote>\\n' + quote + '</blockquote>\\n';\n  }\n\n  html(html) {\n    return html;\n  }\n\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      return '<h' + level + ' id=\"' + this.options.headerPrefix + slugger.slug(raw) + '\">' + text + '</h' + level + '>\\n';\n    } // ignore IDs\n\n\n    return '<h' + level + '>' + text + '</h' + level + '>\\n';\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n          startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(text) {\n    return '<li>' + text + '</li>\\n';\n  }\n\n  checkbox(checked) {\n    return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n  }\n\n  paragraph(text) {\n    return '<p>' + text + '</p>\\n';\n  }\n\n  table(header, body) {\n    if (body) body = '<tbody>' + body + '</tbody>';\n    return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n  }\n\n  tablerow(content) {\n    return '<tr>\\n' + content + '</tr>\\n';\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align ? '<' + type + ' align=\"' + flags.align + '\">' : '<' + type + '>';\n    return tag + content + '</' + type + '>\\n';\n  }\n\n  // span level renderer\n  strong(text) {\n    return '<strong>' + text + '</strong>';\n  }\n\n  em(text) {\n    return '<em>' + text + '</em>';\n  }\n\n  codespan(text) {\n    return '<code>' + text + '</code>';\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  del(text) {\n    return '<del>' + text + '</del>';\n  }\n\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<a href=\"' + escape(href) + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n\n};","map":{"version":3,"sources":["/Users/aziz/Documents/Aziz-Final-project-react-new-markdown-previewer-hooks/node_modules/marked/src/Renderer.js"],"names":["require","defaults","cleanUrl","escape","module","exports","Renderer","constructor","options","code","infostring","escaped","lang","match","highlight","out","langPrefix","blockquote","quote","html","heading","text","level","raw","slugger","headerIds","headerPrefix","slug","hr","xhtml","list","body","ordered","start","type","startatt","listitem","checkbox","checked","paragraph","table","header","tablerow","content","tablecell","flags","tag","align","strong","em","codespan","br","del","link","href","title","sanitize","baseUrl","image"],"mappings":"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","sourcesContent":["const { defaults } = require('./defaults.js');\nconst {\n  cleanUrl,\n  escape\n} = require('./helpers.js');\n\n/**\n * Renderer\n */\nmodule.exports = class Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang, true)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  };\n\n  blockquote(quote) {\n    return '<blockquote>\\n' + quote + '</blockquote>\\n';\n  };\n\n  html(html) {\n    return html;\n  };\n\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      return '<h'\n        + level\n        + ' id=\"'\n        + this.options.headerPrefix\n        + slugger.slug(raw)\n        + '\">'\n        + text\n        + '</h'\n        + level\n        + '>\\n';\n    }\n    // ignore IDs\n    return '<h' + level + '>' + text + '</h' + level + '>\\n';\n  };\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  };\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  };\n\n  listitem(text) {\n    return '<li>' + text + '</li>\\n';\n  };\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  };\n\n  paragraph(text) {\n    return '<p>' + text + '</p>\\n';\n  };\n\n  table(header, body) {\n    if (body) body = '<tbody>' + body + '</tbody>';\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  };\n\n  tablerow(content) {\n    return '<tr>\\n' + content + '</tr>\\n';\n  };\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? '<' + type + ' align=\"' + flags.align + '\">'\n      : '<' + type + '>';\n    return tag + content + '</' + type + '>\\n';\n  };\n\n  // span level renderer\n  strong(text) {\n    return '<strong>' + text + '</strong>';\n  };\n\n  em(text) {\n    return '<em>' + text + '</em>';\n  };\n\n  codespan(text) {\n    return '<code>' + text + '</code>';\n  };\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  };\n\n  del(text) {\n    return '<del>' + text + '</del>';\n  };\n\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  };\n\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  };\n\n  text(text) {\n    return text;\n  };\n};\n"]},"metadata":{},"sourceType":"script"}